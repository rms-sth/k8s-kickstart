# kubectl create namespace crecentric-flask-app --dry-run=client -o yaml | kubectl apply -f -
# kubectl delete secret flask-web-app-secret -n crecentric-flask-app -n crecentric-flask-app
# kubectl delete secret flask-web-app-secret -n crecentric-flask-app
# kubectl delete sts flask-web-app-sts -n crecentric-flask-app
# kubectl delete pvc flask-web-app-pvc --wait=false -n crecentric-flask-app
# kubectl create secret generic flask-web-app-secret --from-literal=APP_LOG_DIR=/var/log/flask --from-literal=FLASK_DEBUG=True --from-literal=FLASK_ENV=development -n crecentric-flask-app
# kubectl create secret generic flask-web-app-secret --from-literal=APP_LOG_DIR=/var/log/flask --from-literal=FLASK_DEBUG=True --from-literal=FLASK_ENV=development
# sudo vim /etc/hosts
# minikube ip
# 192.168.49.2	crecentric-flask.info

---
apiVersion: v1
kind: Namespace
metadata:
  name: crecentric-flask-app

---
apiVersion: v1
kind: Secret
metadata:
  name: flask-web-app-secret
type: Opaque
data:
  APP_LOG_DIR: L3Zhci9sb2cvZmxhc2s=
  FLASK_DEBUG: VHJ1ZQ==
  FLASK_ENV: ZGV2ZWxvcG1lbnQ=
  # APP_LOG_DIR: /var/log/flask
  # FLASK_DEBUG: True
  # FLASK_ENV: development

---
apiVersion: networking.k8s.io/v1
kind: Ingress
metadata:
  name: crecentric-flask-ingress
  namespace: crecentric-flask-app
  annotations:
    nginx.ingress.kubernetes.io/rewrite-target: /$1
spec:
  rules:
    - host: crecentric-flask.info
      http:
        paths:
          - path: /
            pathType: Prefix
            backend:
              service:
                name: flask-web-app-svc
                port:
                  number: 5000

---
apiVersion: v1
kind: PersistentVolumeClaim
metadata:
  namespace: crecentric-flask-app
  labels:
    identifier: flask-web-app-pvc
  name: flask-web-app-pvc
spec:
  storageClassName: standard
  accessModes:
    - ReadWriteOnce
  resources:
    requests:
      storage: 10Gi

---
apiVersion: v1
kind: Service
metadata:
  namespace: crecentric-flask-app
  labels:
    identifier: flask-web-app-svc
  name: flask-web-app-svc
spec:
  type: ClusterIP # provides internal routing
  # type: LoadBalancer # provides external routing
  ports:
    - name: "5000"
      port: 5000
      targetPort: 5000
      # nodePort: 30000
  selector:
    app: flask-web-app

---
apiVersion: apps/v1
kind: StatefulSet
metadata:
  namespace: crecentric-flask-app
  labels:
    identifier: flask-web-app-sts
  name: flask-web-app-sts
spec:
  serviceName: flask-web-app-svc
  replicas: 3
  selector:
    matchLabels:
      app: flask-web-app
  template:
    metadata:
      labels:
        app: flask-web-app
        identifier: flask-web-app-sts
    spec:
      affinity:
        podAntiAffinity:
          requiredDuringSchedulingIgnoredDuringExecution:
            - labelSelector:
                matchExpressions:
                  - key: app
                    operator: In
                    values:
                      - flask-web-app
              topologyKey: "kubernetes.io/hostname"
      containers:
        - image: crecentric/flask
          name: flask-k8s-web-app-container
          ports:
            - containerPort: 5000
          resources: {}
          volumeMounts:
            - name: flask-web-app-volume
              mountPath: /var/log/flask
              subPath: logs
          env:
            - name: APP_LOG_DIR
              valueFrom:
                secretKeyRef:
                  name: flask-web-app-secret
                  key: APP_LOG_DIR
            - name: FLASK_DEBUG
              valueFrom:
                secretKeyRef:
                  name: flask-web-app-secret
                  key: FLASK_DEBUG
            - name: FLASK_ENV
              valueFrom:
                secretKeyRef:
                  name: flask-web-app-secret
                  key: FLASK_ENV
            - name: KUBE_NAMESPACE
              valueFrom:
                fieldRef:
                  fieldPath: metadata.namespace
            - name: KUBE_NODE_NAME
              valueFrom:
                fieldRef:
                  fieldPath: spec.nodeName
            - name: KUBE_POD_NAME
              valueFrom:
                fieldRef:
                  fieldPath: metadata.name
            - name: KUBE_POD_IP
              valueFrom:
                fieldRef:
                  fieldPath: status.podIP
            - name: KUBE_SERVICE_ACCOUNT
              valueFrom:
                fieldRef:
                  fieldPath: spec.serviceAccountName

      restartPolicy: Always
      volumes:
        - name: flask-web-app-volume
          persistentVolumeClaim:
            claimName: flask-web-app-pvc
